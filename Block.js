/** 객체는 block이냐 singleton인지 꼭 정해야한다. */
// 받아온 타입을 자기 타입으로 기억하는데만 관심
// 만들어지는 쪽의 관심
const Block = class {
    // 자신만의 타입을 가짐
    // 타입에 따른 이미지 경로 반환
    constructor(type) {
        this._type = type;
    }
    get image() {
        return `url('img/${this._type}.png')`;
    }
    get type() {
        return this._type;
    }
};
// 생성자를 대신하는 static 함수를 만드는 것이 좋다
// 타입을 안줬을 때 어떻게 만들것인가? 이는 블록의 지식이 아니지, 블록 만드는 놈의 생각이지
// 만드는 쪽의 관심
// 타입은 계속 바뀔 껀데, 이를 블록에다가 정의해야될까? 아니다. 바깥쪽 세상이다. 
// 변화율을 빨리 찾는 방법
// 두개의 파일로 나눴을 때, 파일을 안건드는 놈이 변화율이 낮은 쪽 
// 그래서 타입을 변경할 때 아래 코드만 바뀜
// 하나를 바꾸면 단위테스트부터 다 바꿔야됨
// 우리의 목표는 최대한 많은 파일을 안건들이고 일부만 건들임
Block.GET = (type = parseInt(Math.random() * 5)) => new Block(type);

/**
 * 만드는 쪽의 관심과 만들어지는 쪽의 관심은 틀리다
 */